{"version":3,"sources":["Components/CardList.js","Components/Card.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","Component","robots","Error","SearchBox","searchfield","onSearchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","App","e","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAoBeA,GClBIC,YDCF,SAAC,GAAe,EAAbC,OAEhB,MAAM,IAAIC,MAAM,YEULC,EAbG,SAAC,GAAoC,EAAlCC,YAAmC,IAAtBC,EAAqB,EAArBA,eAChC,OACE,qBAAKC,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCOHK,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,QAJZ,SAOGJ,EAAMK,YCWEC,E,kDAnBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,2DAEAG,KAAKX,MAAMK,a,GAfGhB,aCoDZwB,G,wDA9Cb,aAAe,IAAD,8BACZ,gBAiBFnB,eAAiB,SAACoB,GAChB,EAAKF,SAAS,CAAEnB,YAAaqB,EAAEC,OAAOC,SAjBtC,EAAKT,MAAQ,CACXjB,OAAQ,GACRG,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBwB,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKT,SAAS,CAAEtB,OAAQ+B,S,oBAQ9B,WACE,MAAgCV,KAAKJ,MAA7BjB,EAAR,EAAQA,OAAQG,EAAhB,EAAgBA,YACV6B,EAAiBhC,EAAOiC,QAAO,SAACC,GACpC,OAAOA,EAAMC,KAAKC,cAAcC,SAASlC,EAAYiC,kBAGvD,OAAsB,IAAlBpC,EAAOsC,OACF,oBAAIjC,UAAU,KAAd,qBAGL,sBAAKA,UAAU,KAAf,UACE,6CACA,cAAC,EAAD,CAAWD,eAAgBiB,KAAKjB,iBAChC,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUJ,OAAQgC,e,GAtCdjC,cCKHwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.3b8b377f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  if (true) {\r\n    throw new Error(\"nooooo\");\r\n  }\r\n  const cardComponent = robots.map((user, index) => {\r\n    return (\r\n      <Card\r\n        key={index}\r\n        id={robots[index].id}\r\n        name={robots[index].name}\r\n        email={robots[index].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    const { name, email, id } = this.props;\r\n    return (\r\n      <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n        <img src={`https://robohash.org/${id}?200x200`} alt='Robots' />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, onSearchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={onSearchChange}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"80vh\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1> Oooops, thats not great </h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../Components/CardList\";\r\nimport Searchbox from \"../Components/SearchBox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = (e) => {\r\n    this.setState({ searchfield: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n\r\n    if (robots.length === 0) {\r\n      return <h1 className='tc'>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className='tc'>\r\n          <h1>ROBOFRIENDS</h1>\r\n          <Searchbox onSearchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}